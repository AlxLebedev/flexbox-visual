export default class DescriptionGenerator {
  constructor() {
    this.displayProperty = {
      common: 'Многоцелевое свойство, которое определяет, как элемент должен быть показан в документе. В данном случа, свойство применяется к контейнеру, в котором располагаются элементы и влияет именно на отображение элементов внутри контейнера.',
      block: 'При значении свойства block блочные элементы располагаются один над другим вертикально. Блочный элемент внутри контейнера стремится занять всю доступную ширину, но в нашем случае ширина и высота элементов ограничена, чтобы кубики были иенно кубиками. Блоки прилегают друг к другу вплотную, если нет внешних отступов.',
      flex: 'Если родительскому контейнеру назначить свойство display со значение flex, то с этого момента элементы внутри флекс-контейнера можно называть флекс-элементами (flex-items). Флекс-элементы внутри флекс-контейнера располагаются друг за другом вплотную, их ширина подстраивается под контент, если не определена отдельно.',
    };
    this.flexDirectionProperty = {
      common: 'Свойство применяется к флекс-контейнеру и задаёт направление основных осей в контейнере, тем самым определяет положение флекс-элементов в контейнере.',
      row: 'Значение row определяет, что главная ось направлена так же, как и ориентация текста, по умолчанию слева направо.',
      column: 'Значение column определяет, что, главная ось располагается вертикально и направлена сверху вниз.',
      'row-reverse': 'Похоже на значение row, но меняются местами начальная и конечная точки и главная ось направлена справа налево.',
      'column-reverse': 'Главная ось располагается вертикально, но меняется положение начальной и конечной точек и ось направлена снизу вверх.',
    };
    this.flexWrapProperty = {
      common: 'Свойство применяется к флекс-контейнеру и задаёт возможность переноса флекс-элементов на новую строку, если они не помещаются в рамках флекс-контейнера. По умолчанию флекс-элементы выстраиваются в ряд и стараются уместиться в контейнере "ужимая" свою ширину.',
      wrap: 'флекс-элементы будут перенесены на несколько строк сверху вниз.',
      nowrap: 'Все флекс-элементы будут в одной строке.',
      'wrap-reverse': 'флекс-элементы будут перенесены на несколько строк снизу вверх.',
    };
  }

  getDescription(property, value) {
    switch (property) {
      case 'display':
        return [this.displayProperty.common, this.displayProperty[value]];
      case 'flex-direction':
        return [this.flexDirectionProperty.common, this.flexDirectionProperty[value]];
      case 'flex-wrap':
        return [this.flexWrapProperty.common, this.flexWrapProperty[value]];
      default:
        return 'No descriptions...';
    }
  }
}
