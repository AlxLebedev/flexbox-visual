export default class DescriptionGenerator {
  constructor() {
    this.displayProperty = {
      block: 'При значении свойства <code>block</code> блочные элементы располагаются один под другим вертикально. Блочный элемент внутри контейнера стремится занять всю доступную ширину, но&nbsp;в&nbsp;нашем случае ширина и&nbsp;высота элементов ограничена, чтобы кубики были именно кубиками с&nbsp;различными размерами для лучшего визуального восприятия. Блоки прилегают друг к&nbsp;другу вплотную, если внешние отступы не&nbsp;установлены.',
      flex: 'Если родительскому контейнеру назначить свойство <code>display</code> со&nbsp;значение <code>flex</code>, то&nbsp;с&nbsp;этого момента сам родительский блок можно называть flex-контейнером, а&nbsp;элементы внутри флекс-контейнера обозначаются как флекс-элементы (flex-items). Флекс-элементы внутри флекс-контейнера по&nbsp;умолчанию располагаются друг за&nbsp;другом вплотную, их&nbsp;ширина подстраивается под контент, если не&nbsp;заданы дополнительные свойства, меняющие это поведение.',
    };
    this.flexDirectionProperty = {
      row: 'Значение <code>row</code> является значением по&nbsp;умолчанию и&nbsp;определяет, что основная ось направлена так&nbsp;же, как и&nbsp;ориентация текста, по&nbsp;умолчанию слева направо. Стоит отметить, что если направление текста изменено, например, свойство <code>dir</code> имеет значение <code>rtl</code>, то&nbsp;направление оси пойдет справа на&nbsp;лево.',
      column: 'Значение <code>column</code> определяет, что основная ось располагается вертикально и&nbsp;направлена сверху вниз.',
      'row-reverse': 'Основная ось располагается также, как и&nbsp;при значении <code>row</code>, но&nbsp;меняются местами начальная и&nbsp;конечная точки, следовательно основная ось направлена в&nbsp;обратную сторону&nbsp;&mdash; по&nbsp;умолчанию справа налево.',
      'column-reverse': 'Основная ось располагается как и&nbsp;при значении <code>column</code> - вертикально, но&nbsp;меняется положение начальной и&nbsp;конечной точек, в&nbsp;таком случае ось направлена в&nbsp;противоположную сторону от&nbsp;значения <code>column</code>, по&nbsp;умолчанию снизу вверх.',
    };
    this.flexWrapProperty = {
      wrap: 'При значении <code>wrap</code> флекс-элементы будут перенесены на&nbsp;новые строки. Заданная ширина для элементов восстановится к&nbsp;своим значениям, а&nbsp;те&nbsp;элементы, что не&nbsp;убрались на&nbsp;одной строке, перейдут на&nbsp;следующую.',
      nowrap: 'Значение по&nbsp;умолчанию. Не&nbsp;позволяет флекс-элементам переходить на&nbsp;новые строки&nbsp;&mdash; все они будут размещены на&nbsp;одной линии в&nbsp;направлении <code>flex-direction</code>, при необходимости сжаты.',
      'wrap-reverse': 'Свойство аналогично <code>wrap</code>, отличие в&nbsp;том, что флекс-элементы будут перенесены на&nbsp;несколько строк снизу вверх&nbsp;&mdash; напраление противоположно <code>flex-direction</code>.',
    };
    this.justifyContentProperty = {
      'flex-start': 'Значение <code>flex-start</code> является значением по&nbsp;умолчанию для флекс-контейнера&nbsp;&mdash; элементы располагаются друг за&nbsp;другом и&nbsp;сдвинуты в&nbsp;начало основной оси флекс-контейнера.',
      'flex-end': 'При значении <code>flex-end</code> элементы располагаются друг за&nbsp;другом и&nbsp;сдвинуты ближе к&nbsp;концу основной оси флекс-контейнера.',
      center: 'Если свойству задать значение <code>center</code>, то&nbsp;элементы располагаются друг за&nbsp;другом на&nbsp;гавной оси и&nbsp;центрированы вдоль нее.',
      'space-between': 'При значении <code>space-between</code> элементы равномерно распределены по&nbsp;основной оси&nbsp;&mdash; первый элемент находится в&nbsp;начале оси и&nbsp;прижат к&nbsp;краю контейнера, последний элемент располагается в&nbsp;конце. Элементы между первым и&nbsp;последним располагаются равномерно.',
      'space-around': 'При значении <code>space-around</code> элементы равномерно распределены по&nbsp;основной оси с&nbsp;одинаковым пространством между флекс-элементами. Первый и&nbsp;последний элементы не&nbsp;прижаты к&nbsp;краям флекс-контейнера. Расстояния между каждой парой флекс-элементов равны, расстояния между краем флекс-контейнера и&nbsp;флекс-элементом равны половине расстояния между соседними флекс-элементами.',
      'space-evenly': 'При значении <code>space-evenly</code> элементы распределяются таким образом, что расстояние между любыми двумя элементами (и&nbsp;расстояние до&nbsp;краев флекс-контейнера) становится одинаковым.',
    };
    this.alignItemsProperty = {
      stretch: 'Значение <code>stretch</code> является значением по&nbsp;умолчанию для флекс-контейнера&nbsp;&mdash; элементы растягиваются, чтобы заполнить контейнер.',
      'flex-start': 'Элементы размещаются в&nbsp;начале поперечной оси.',
      'flex-end': 'Элементы располагаются в&nbsp;конце поперечной оси.',
      center: 'Элементы центрированы по&nbsp;поперечной оси.',
      baseline: 'Элементы выровнены, по&nbsp;их&nbsp;базовой линии.',
    };
    this.alignContentProperty = {
      stretch: 'Значение <code>stretch</code> является значением по&nbsp;умолчанию для флекс-контейнера&nbsp;&mdash; линии растягиваются так, чтобы занять оставшееся пространство равномерно.',
      'flex-start': 'Элементы сдвинуты в&nbsp;начало контейнера&nbsp;&mdash; располагаются в&nbsp;начале поперчечной оси, каждая следующая строка идет вровень с&nbsp;предыдущей.',
      'flex-end': 'Элементы сдвинуты в&nbsp;конец контейнера&nbsp;&mdash; располагаются в&nbsp;конце поперчечной оси, каждая следующая строка идет вровень с&nbsp;предыдущей.',
      center: 'Элементы выровнены по&nbsp;центру в&nbsp;контейнера&nbsp;&mdash; располагаются по&nbsp;центру поперечной оси.',
      'space-between': 'Элементы равномерно распределены: первая строка находится в&nbsp;начале контейнера, а&nbsp;последняя&nbsp;&mdash; в&nbsp;конце. Строки между ними располагаются с&nbsp;одинаковым расстоянием между друг-другом.',
      'space-around': 'Элементы равномерно распределены с&nbsp;равным пространством между строками. Расстояние от&nbsp;края контейнера до&nbsp;первой или последней строки равно половине расстояния между соседними строками.',
      'space-evenly': 'Элементы распределены равномерно, пространство распределяется поровну между строками и&nbsp;между краями контейнера и&nbsp;первыми или последними строками.',
    };
    this.alignSelfProperty = {
      auto: 'Значение <code>auto</code> является значением по&nbsp;умолчанию, использует родительское значение свойства <code>align-items</code>, если его нет, то&nbsp;использует значение <code>stretch</code>.',
      'flex-start': 'Элемент размещается в&nbsp;начале поперечной оси.',
      'flex-end': 'Элемент размещается в&nbsp;конце поперечной оси.',
      center: 'Элемент центрируется по&nbsp;поперечной оси.',
      baseline: 'Элемент выровнен по&nbsp;базовой линии.',
      stretch: 'Элемент растягивается, чтобы заполнить контейнер.',
    };
    this.orderProperty = {
      0: 'Значение по&nbsp;умолчанию у&nbsp;всех элементов = 0. В&nbsp;таком случае элементы выстраиваются по&nbsp;порядку следования в&nbsp;разметке.',
      1: 'Если дать элементу значение&nbsp;1, то&nbsp;он&nbsp;будет перемещен в&nbsp;конец строки если у&nbsp;всех остальных элементов значение <code>order</code> равняется 0. Также элемент будет выстроен по&nbsp;порядку в&nbsp;зависимости от&nbsp;других элементов, имеющих такое&nbsp;же значение <code>order</code>.',
      2: 'Если дать элементу значение&nbsp;2, то&nbsp;он&nbsp;будет перемещен после всех элементов с <code>order</code> 1&nbsp;и&nbsp;выстроен попорядку среди равных себе.',
      3: 'Если дать элементу значение&nbsp;3, то&nbsp;он&nbsp;будет перемещен после всех элементов с <code>order</code> 2&nbsp;и&nbsp;выстроен попорядку среди равных себе.',
      4: 'Если дать элементу значение&nbsp;4, то&nbsp;он&nbsp;будет перемещен после всех элементов с <code>order</code> 3&nbsp;и&nbsp;выстроен попорядку среди равных себе.',
    };
    this.flexBasisProperty = {
      common: `
      <p>Это свойство определяет базовый (начальный, основной) размер элемента по&nbsp;умолчанию до&nbsp;распределением оставшегося пространства в&nbsp;соответствии со&nbsp;свойствами <code>flex-grow</code> и <code>flex-shrink</code>.</p>
      <p>Конечная ширина флекс-элемента будет зависеть от&nbsp;базовой ширины, установленно свойством <code>flex-basis</code>, и&nbsp;значений <code>flex-grow</code>, <code>flex-shrink</code>, а&nbsp;также от&nbsp;величины контента.</p>
      <p>По&nbsp;умолчанию значение <code>auto</code>.</p>
      <p>Если установлено значение&nbsp;0, дополнительное пространство вокруг содержимого не&nbsp;учитывается.</p>
      `,
      auto: '<code>flex-basis: auto</code> означает &laquo;смотреть на&nbsp;значения <code>width</code> или <code>height</code>&raquo; данного флекс-элемента.',
      px: 'Устанавливает базовый размер в&nbsp;пикселях.',
      '%': 'Значение в&nbsp;процентах определяется относительно размера флекс-контейнера. В&nbsp;случае, если размер не&nbsp;установлен, <code>flex-basis</code> ориентируется на&nbsp;размеры собственного содержимого.&nbsp;20% означает, что размер элемента по&nbsp;умолчанию перед распределением оставшегося пространства будет&nbsp;20% от&nbsp;ширины родителя.',
    };
  }

  getDescription(property, value) {
    switch (property) {
      case 'display':
        return [this.displayProperty[value]];
      case 'flex-direction':
        return [this.flexDirectionProperty[value]];
      case 'flex-wrap':
        return [this.flexWrapProperty[value]];
      case 'justify-content':
        return [this.justifyContentProperty[value]];
      case 'align-items':
        return [this.alignItemsProperty[value]];
      case 'align-content':
        return [this.alignContentProperty[value]];
      case 'align-self':
        return [this.alignSelfProperty[value]];
      case 'order':
        return [this.orderProperty[value]];
      case 'flex-basis':
        return [this.flexBasisProperty[value]];
      default:
        return '';
    }
  }
}
