export default class DescriptionGenerator {
  constructor() {
    this.displayProperty = {
      common: 'Многоцелевое свойство, которое определяет, как элемент должен быть показан в документе. В данном случа, свойство применяется к контейнеру, в котором располагаются элементы и влияет именно на отображение элементов внутри контейнера.',
      block: 'При значении свойства block блочные элементы располагаются один над другим вертикально. Блочный элемент внутри контейнера стремится занять всю доступную ширину, но в нашем случае ширина и высота элементов ограничена, чтобы кубики были иенно кубиками. Блоки прилегают друг к другу вплотную, если нет внешних отступов.',
      flex: 'Если родительскому контейнеру назначить свойство display со значение flex, то с этого момента элементы внутри флекс-контейнера можно называть флекс-элементами (flex-items). Флекс-элементы внутри флекс-контейнера располагаются друг за другом вплотную, их ширина подстраивается под контент, если не определена отдельно.',
    };
    this.flexDirectionProperty = {
      common: 'Свойство применяется к флекс-контейнеру и задаёт направление основных осей в контейнере, тем самым определяет положение флекс-элементов в контейнере.',
      row: 'Значение row определяет, что главная ось направлена так же, как и ориентация текста, по умолчанию слева направо.',
      column: 'Значение column определяет, что, главная ось располагается вертикально и направлена сверху вниз.',
      'row-reverse': 'Похоже на значение row, но меняются местами начальная и конечная точки и главная ось направлена справа налево.',
      'column-reverse': 'Главная ось располагается вертикально, но меняется положение начальной и конечной точек и ось направлена снизу вверх.',
    };
    this.flexWrapProperty = {
      common: 'Свойство применяется к флекс-контейнеру и задаёт возможность переноса флекс-элементов на новую строку, если они не помещаются в рамках флекс-контейнера. По умолчанию флекс-элементы выстраиваются в ряд и стараются уместиться в контейнере "ужимая" свою ширину.',
      wrap: 'флекс-элементы будут перенесены на несколько строк сверху вниз.',
      nowrap: 'Все флекс-элементы будут в одной строке.',
      'wrap-reverse': 'флекс-элементы будут перенесены на несколько строк снизу вверх.',
    };
    this.justifyContentProperty = {
      common: 'Свойство применяется к флекс-контейнеру и задаёт выравнивание вдоль главной оси, тем самым распределяет свободное пространство внутри флекс-контейнера.',
      'flex-start': 'Значение flex-start является значением по умолчанию для флекс-контейнера - элементы сдвинуты в начало главной оси флекс-контейнера.',
      'flex-end': 'Элементы сдвинуты ближе к концу главной оси флекс-контейнера',
      center: 'Элементы центрированы вдоль линии.',
      'space-between': 'Элементы равномерно распределены по линии; первый элемент находится в начале строки, последний элемент в конце строки.',
      'space-around': 'Элементы равномерно распределены по линии с одинаковым пространством вокруг них. Обратите внимание, что визуально пространства не равны, так как все элементы имеют одинаковое пространство с обеих сторон. Первый элемент будет иметь одну единицу пространства напротив края контейнера, но две единицы пространства между следующим элементом, потому что у следующего элемента есть свой собственный интервал, который применяется.',
      'space-evenly': 'Элементы распределяются таким образом, чтобы расстояние между любыми двумя элементами (и расстояние до краев) было одинаковым.',
    };
    this.alignItemsProperty = {
      common: 'Это свойство определяет поведение по умолчанию того, как флекс-элементы располагаются вдоль поперечной оси на текущей линии. Думайте об этом как о justify-content версии для поперечной оси (перпендикулярной главной оси).',
      stretch: 'Значение stretch является значением по умолчанию для флекс-контейнера - элементы растягиваются, чтобы заполнить контейнер (все еще соблюдаются min-width / max-width).',
      'flex-start': 'Элементы размещаются в начале поперечной оси.',
      'flex-end': 'Элементы располагаются в конце поперечной оси.',
      center: 'Элементы центрированы по поперечной оси.',
      baseline: 'Элементы выровнены, по их базовой линии.',
    };
    this.alignContentProperty = {
      common: 'Это свойство выравнивает линии в пределах флекс-контейнера, когда есть дополнительное пространство на поперечной оси, подобно тому, как justify-content выравнивает отдельные элементы в пределах главной оси. Свойство не действует, когда есть только одна строка флекс-элементов.',
      stretch: 'Значение stretch является значением по умолчанию для флекс-контейнера - линии растягиваются, чтобы занять оставшееся пространство.',
      'flex-start': 'Элементы сдвинуты в начало контейнера.',
      'flex-end': 'Элементы сдвинуты в конец контейнера.',
      center: 'Элементы выровнены по центру в контейнере.',
      'space-between': 'Элементы равномерно распределены; первая строка находится в начале контейнера, а последняя — в конце.',
      'space-around': 'Элементы равномерно распределены с равным пространством вокруг каждой строки.',
      'space-evenly': 'Элементы распределены равномерно, вокруг них одинаковое пространство.',
    };
    this.alignSelfProperty = {
      common: 'Это свойство позволяет переопределить выравнивание по умолчанию (или указанное с помощью align-items) для отдельных флекс-элементов.',
      auto: 'Значение auto является значением по умолчанию.',
      'flex-start': 'Элемент размещается в начале поперечной оси.',
      'flex-end': 'Элемент размещается в конце поперечной оси.',
      center: 'Элемент центрируется по поперечной оси.',
      baseline: 'Элемент выровнен по базовой линии.',
      stretch: '"Элемент растягивается, чтобы заполнить контейнер.',
    };
    this.orderProperty = {
      common: 'По умолчанию flex элементы располагаются в исходном порядке. Однако свойство order управляет порядком их появления во флекс-контейнере. По умолчанию значение order равняется 1.',
      0: 'Значение по умолчанию у всех элементов = 0. В таком случае элементы выстраиваются по порядку следования в разметке.',
      1: 'Если дать элементу значение 1, то он будет перемещен в начало строки и выстроен по порядку в зависимости от других элементов, имеющих такое же значение order.',
      2: 'Если дать элементу значение 2, то он будет перемещен после всех элементов с order 1 и выстроен попорядку среди равных себе.',
      3: 'Если дать элементу значение 3, то он будет перемещен после всех элементов с order 2 и выстроен попорядку среди равных себе.',
      4: 'Если дать элементу значение 4, то он будет перемещен после всех элементов с order 3 и выстроен попорядку среди равных себе.',
    };
    this.flexGrowProperty = {
      common: 'Это свойство определяет способность флекс-элемента растягиваться в случае необходимости. Оно принимает значение от нуля, которое служит пропорцией. Это свойство, какое количество доступного пространства внутри гибкого контейнера должен занимать элемент.',
      0: 'Ноль - это значение по умолчанию.',
      1: 'Если для всех элементов flex-grow установлено значение 1, оставшееся пространство в контейнере будет равномерно распределено между всеми дочерними элементами.',
      2: 'Если один из дочерних элементов имеет значение 2, этот элемент займет в два раза больше места, чем остальные (или попытается, по крайней мере).',
    };
    this.flexShrinkProperty = {
      common: 'Это свойство определяет способность флекс-элемента сжиматься в случае необходимости. Оно принимает значение от нуля, которое служит пропорцией.',
      0: 'Ноль - это значение по умолчанию.',
      1: 'Выбрано значение 1.',
      2: 'выбрано значение 2.',
    };
    this.flexBasisProperty = {
      common: 'Это свойство определяет размер элемента по умолчанию перед распределением оставшегося пространства.',
      0: 'Если установлено значение 0, дополнительное пространство вокруг содержимого не учитывается.',
      '20%': 'Размер элемента по умолчанию перед распределением оставшегося пространства будет 20% от ширины родителя.',
      '5rem': 'Размер элемента по умолчанию перед распределением оставшегося пространства будет 5 величин размере шрифта элемента html.',
    };
  }

  getDescription(property, value) {
    switch (property) {
      case 'display':
        return [this.displayProperty.common, this.displayProperty[value]];
      case 'flex-direction':
        return [this.flexDirectionProperty.common, this.flexDirectionProperty[value]];
      case 'flex-wrap':
        return [this.flexWrapProperty.common, this.flexWrapProperty[value]];
      case 'justify-content':
        return [this.justifyContentProperty.common, this.justifyContentProperty[value]];
      case 'align-items':
        return [this.alignItemsProperty.common, this.alignItemsProperty[value]];
      case 'align-content':
        return [this.alignContentProperty.common, this.alignContentProperty[value]];
      case 'align-self':
        return [this.alignSelfProperty.common, this.alignSelfProperty[value]];
      case 'order':
        return [this.orderProperty.common, this.orderProperty[value]];
      case 'flex-grow':
        return [this.flexGrowProperty.common, this.flexGrowProperty[value]];
      case 'flex-shrink':
        return [this.flexShrinkProperty.common, this.flexShrinkProperty[value]];
      case 'flex-basis':
        return [this.flexBasisProperty.common, this.flexBasisProperty[value]];
      default:
        return 'No descriptions...';
    }
  }
}
