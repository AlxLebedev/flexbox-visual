export default class DescriptionGenerator {
  constructor() {
    this.displayProperty = {
      common: 'Свойство display является многоцелевым свойством, определяющим как элемент будет отрисован на странице или как его дочерние элементы будут располагаться внутри. В данном случае, мы имеем дело со вторым случаем - значение flex влияет на расположение дочерних элементов. Свойство применяется к контейнеру, в котором располагаются элементы и влияет именно на отображение элементов внутри контейнера. Существует много различных значений свойства display, сейчас мы рассмотрим только flex и block.',
      block: 'При значении свойства block блочные элементы располагаются один под другим вертикально. Блочный элемент внутри контейнера стремится занять всю доступную ширину, но в нашем случае ширина и высота элементов ограничена, чтобы кубики были именно кубиками с различными размерами для лучшего визуального восприятия. Блоки прилегают друг к другу вплотную, если нет внешних отступов.',
      flex: 'Если родительскому контейнеру назначить свойство display со значение flex, то с этого момента сам родительский блок можно называть flex-контейнером, а элементы внутри флекс-контейнера обозначаются как флекс-элементы (flex-items). Флекс-элементы внутри флекс-контейнера располагаются друг за другом вплотную, их ширина подстраивается под контент, если не определена отдельно.',
    };
    this.flexDirectionProperty = {
      common: 'Свойство применяется исключительно ко флекс-контейнеру и задаёт направление главной оси в этом контейнере, а также направление вдоль этой оси (nomal или reverse), тем самым определяет то, как флекс-элементы располагаются в контейнере.',
      row: 'Значение row является значением по умолчанию и определяет, что главная ось направлена так же, как и ориентация текста, по умолчанию слева направо. Стоит отметить, что если направление текста изменено, например, свойство dir имеет значение rtl, то направление оси пойдет справа на лево.',
      column: 'Значение column определяет, что главная ось располагается вертикально и направлена сверху вниз.',
      'row-reverse': 'Главная ось располагается также, как и при значении row, но меняются местами начальная и конечная точки, следовательно главная ось направлена в обратную сторону - по умолчанию справа налево.',
      'column-reverse': 'Главная ось располагается как и при значении column - вертикально, но меняется положение начальной и конечной точек, в таком случае ось направлена в противоположную сторону от значения column, по умолчанию снизу вверх.',
    };
    this.flexWrapProperty = {
      common: 'Свойство применяется ко флекс-контейнеру и задаёт возможность переноса флекс-элементов на новую строку, если они не помещаются в рамках флекс-контейнера. По умолчанию флекс-элементы выстраиваются в ряд и стараются уместиться в контейнере "ужимая" свою ширину. В данном примере специально в контейнер помещено много флекс-элементов с фиксированной шириной и, как видим, при значении nowrap флекс элементы пытаются ужаться и втиснуться в контейнер.',
      wrap: 'При значении wrap флекс-элементы будут перенесены на новые строки. Заданная ширина для элементов восстановится к своим значениям, а те элементы, что не убрались на одной строке, перейдут на следующую.',
      nowrap: 'Значение по умолчанию. Не позволяет флекс-элементам переходить на новые строки - все они будут размещены на одной линии в направлении flex-direction, при необходимости сжаты.',
      'wrap-reverse': 'Свойство аналогично wrap, отличие в том, что флекс-элементы будут перенесены на несколько строк снизу вверх - напраление противоположно flex-direction.',
    };
    this.justifyContentProperty = {
      common: 'Свойство применяется ко флекс-контейнеру и определяет как браузер распределяет свободное пространство внутри флекс-контейнера вдоль главной оси. Данное свойство работает, если внутри флекс-контейнера имеется свободное пространство.',
      'flex-start': 'Значение flex-start является значением по умолчанию для флекс-контейнера - элементы располагаются друг за другом и сдвинуты в начало главной оси флекс-контейнера.',
      'flex-end': 'При значении flex-end элементы располагаются друг за другом и сдвинуты ближе к концу главной оси флекс-контейнера.',
      center: 'Если свойству задать значение center, то элементы располагаются друг за другом на гавной оси и центрированы вдоль нее.',
      'space-between': 'При значении space-between элементы равномерно распределены по главной оси - первый элемент находится в начале оси и прижат к краю контейнера, последний элемент располагается в конце. Элементы между первым и последним располагаются равномерно.',
      'space-around': 'При значении space-around элементы равномерно распределены по главной оси с одинаковым пространством между флекс-элементами. Первый и последний элементы не прижаты к краям флекс-контейнера. Расстояния между каждой парой флекс-элементов равны, расстояния между краем флекс-контейнера и флекс-элементом равны половине расстояния между соседними флекс-элементами.',
      'space-evenly': 'При значении space-evenly элементы распределяются таким образом, что расстояние между любыми двумя элементами (и расстояние до краев флекс-контейнера) становится одинаковым.',
    };
    this.alignItemsProperty = {
      common: 'Это свойство определяет как флекс-элементы располагаются вдоль поперечной оси внутри флекс-контейнера. Можно вообразить, что это версия justify-content для поперечной оси (перпендикулярной главной).',
      stretch: 'Значение stretch является значением по умолчанию для флекс-контейнера - элементы растягиваются, чтобы заполнить контейнер.',
      'flex-start': 'Элементы размещаются в начале поперечной оси.',
      'flex-end': 'Элементы располагаются в конце поперечной оси.',
      center: 'Элементы центрированы по поперечной оси.',
      baseline: 'Элементы выровнены, по их базовой линии.',
    };
    this.alignContentProperty = {
      common: 'Это свойство выравнивает строки флекс-элементов в пределах флекс-контейнера, когда есть дополнительное пространство на поперечной оси, подобно тому, как justify-content выравнивает отдельные элементы в пределах главной оси. Свойство не действует, когда есть только одна строка флекс-элементов по причине того, что для выравнивания строк флекс-элементов ему необходимо несколько строк.',
      stretch: 'Значение stretch является значением по умолчанию для флекс-контейнера - линии растягиваются так, чтобы занять оставшееся пространство равномерно.',
      'flex-start': 'Элементы сдвинуты в начало контейнера - располагаются в начале поперчечной оси, каждая следующая строка идет вровень с предыдущей.',
      'flex-end': 'Элементы сдвинуты в конец контейнера - располагаются в конце поперчечной оси, каждая следующая строка идет вровень с предыдущей.',
      center: 'Элементы выровнены по центру в контейнера - располагаются по центру поперечной оси.',
      'space-between': 'Элементы равномерно распределены: первая строка находится в начале контейнера, а последняя — в конце. Строки между ними располагаются с одинаковым расстоянием между друг-другом.',
      'space-around': 'Элементы равномерно распределены с равным пространством между строками. Расстояние от края контейнера до первой или последней строки равно половине расстояния между соседними строками.',
      'space-evenly': 'Элементы распределены равномерно, пространство распределяется поровну между строками и между краями контейнера и первыми или последними строками.',
    };
    this.alignSelfProperty = {
      common: 'Это свойство выравнивает выбраный флекс-элемент - позволяет переопределить выравнивание по умолчанию (или указанное с помощью align-items) для отдельных флекс-элементов. Значения свойств одинаковы со свойством align-items, разница лишь в том, что align-self влияет на конкретный флекс-элемент, в то время как свойство align-items применяется ко флекс-контейнеру и распространяет свое действие на все флекс-элементы внутри него.',
      auto: 'Значение auto является значением по умолчанию, использует родительское значение свойства align-items, если его нет, то использует значение stratch.',
      'flex-start': 'Элемент размещается в начале поперечной оси.',
      'flex-end': 'Элемент размещается в конце поперечной оси.',
      center: 'Элемент центрируется по поперечной оси.',
      baseline: 'Элемент выровнен по базовой линии.',
      stretch: 'Элемент растягивается, чтобы заполнить контейнер.',
    };
    this.orderProperty = {
      common: 'По умолчанию flex элементы располагаются в исходном порядке, согласно порядку в разметке документа. Однако свойство order может этот порядок изменить. Оно определяет порядок появления выбранного флекс-элемента во флекс-контейнере. Элементы располагаются в восходящем порядке по значению свойства order: чем выше значение, тем правее встает элемент по отношению к другим элементам с более низким значением order. Если у нескольких элементов значение order одинаково, то они располагатся согласно порядку в разметке документа. Важно отметить, что свойство order переставляет элементы лишь визуально, не нарушая изначальный порядок разметки документа. По умолчанию значение order равняется 0.',
      0: 'Значение по умолчанию у всех элементов = 0. В таком случае элементы выстраиваются по порядку следования в разметке.',
      1: 'Если дать элементу значение 1, то он будет перемещен в конец строки если у всех остальных элементов значение order равняется 0. Также элемент будет выстроен по порядку в зависимости от других элементов, имеющих такое же значение order.',
      2: 'Если дать элементу значение 2, то он будет перемещен после всех элементов с order 1 и выстроен попорядку среди равных себе.',
      3: 'Если дать элементу значение 3, то он будет перемещен после всех элементов с order 2 и выстроен попорядку среди равных себе.',
      4: 'Если дать элементу значение 4, то он будет перемещен после всех элементов с order 3 и выстроен попорядку среди равных себе.',
    };
    this.flexGrowProperty = {
      common: `
      Это свойство определяет способность флекс-элемента растягиваться в случае необходимости. Оно принимает значения в виде целых положительных чисел, которое служит пропорцией - какое количество доступного пространства внутри гибкого контейнера должен занимать элемент.
      По умолчанию значение равно 0 - элементы не растягиваются и не занимают свободное пространство.
      Если одному элементу задать значение 1, то он займет все доступное свободное пространство при условии, что у остальных злементов значение свойства равняетя 0.
      Если для всех элементов flex-grow установлено значение 1, оставшееся пространство в контейнере будет равномерно распределено между всеми дочерними элементами.
      Если один из элементов имеет значение 2, другой значение 1, третий элемент значение равным 0, то элемент со значением 2 займет в два раза больше свободного места, чем остальные элемент со значением 1, элемент со значением 0 не изменит свою ширину.
      `,
    };
    this.flexShrinkProperty = {
      common: `
      Если ширина флекс-элемента, или сумма ширин флекс-элементов, больше, чем ширина флекс-контейнера, то такие флекс-элементы будут сужаться, чтобы разместиться в своем контейнере. Разница между суммой ширин флекс-элементов и шириной флекс-контейнера, назыввается отрицательным свободным пространством.
      Значение свойства flex-shrink по умолчанию равно 1 и устанавливает коэффициент сжатия flex-элемента относительно других flex-элементов при распределении отрицательного свободного пространства.
      Это свойство определяет способность флекс-элемента сжиматься в случае необходимости. Как и flex-grow, принимает значения в виде целых положительных чисел, но определяет то, насколько элемент будет сужаться по отношению к другим флекс-элементам, чтобы разместиться с ними в одну строку.
      При значении, отличном от 0 элементы могут сужаться, если их ширина (сумма ширин) больше, чем ширина флекс-контейнера.
      Если элементу задать значение 0, то он "расправит плечи", если его ширина больше ширины флекс-контейнера, или сумма ширин флекс-элементов больше, чем ширина их контейнера. Значение 0 запрещает флекс-элементу сужаться.
      Если увеличивать значение flex-shrink, то увидим как элемент сужается по отношению к другим флекс-элементам.
      `,
    };
    this.flexBasisProperty = {
      common: `
      Это свойство определяет базовый (начальный, основной) размер элемента по умолчанию до распределением оставшегося пространства в соответствии со свойствами flex-grow и flex-shrink.
      Конечная ширина флекс-элемента будет зависеть от базовой ширины, установленно свойством flex-basis, и значений flex-grow, flex-shrink, а также от величины контента.
      По умолчанию значение auto.
      Если установлено значение 0, дополнительное пространство вокруг содержимого не учитывается.
      `,
      auto: 'flex-basis:auto означает "смотреть на значения width или height" данного флекс-элемента',
      px: 'Устанавливает базовый размер в пикселях.',
      '%': 'Значение в процентах определяется относительно размера флекс-контейнера. В случае, если размер не установлен, flex-basis ориентируется на размеры собственного содержимого. 20% означает, что азмер элемента по умолчанию перед распределением оставшегося пространства будет 20% от ширины родителя.',
    };
  }

  getDescription(property, value) {
    switch (property) {
      case 'display':
        return [this.displayProperty.common, this.displayProperty[value]];
      case 'flex-direction':
        return [this.flexDirectionProperty.common, this.flexDirectionProperty[value]];
      case 'flex-wrap':
        return [this.flexWrapProperty.common, this.flexWrapProperty[value]];
      case 'justify-content':
        return [this.justifyContentProperty.common, this.justifyContentProperty[value]];
      case 'align-items':
        return [this.alignItemsProperty.common, this.alignItemsProperty[value]];
      case 'align-content':
        return [this.alignContentProperty.common, this.alignContentProperty[value]];
      case 'align-self':
        return [this.alignSelfProperty.common, this.alignSelfProperty[value]];
      case 'order':
        return [this.orderProperty.common, this.orderProperty[value]];
      case 'flex-grow':
        return [this.flexGrowProperty.common];
      case 'flex-shrink':
        return [this.flexShrinkProperty.common];
      case 'flex-basis':
        return [this.flexBasisProperty.common, this.flexBasisProperty[value]];
      default:
        return 'No descriptions...';
    }
  }
}
